const express = require('express');
const router = express.Router();
const passport = require('passport');
const authenticate = passport.authenticate("jwt", { session: false });
const isAdmin = require('./../helpers/authorize');
const donationController = require('./../controllers/donationController');

/* DONATION SCHEMA */
/**
* @swagger 
* components:
*   schemas:
*       Donation:
*           type: object
*           required: 
*               - donationId          
*               - date          
*               - amount          
*               - collectId          
*               - userId           
*           properties: 
*               donationId:           
*                   type: integer           
*                   description: Primary Key. Autogenerated Id        
*               date:           
*                   type: string
*                   format: date-time                   
*               amount:                     
*                   type: number                              
*               collectId:           
*                   type: integer                              
*                   description: Foreign Key for Collect schema        
*               userId:           
*                   type: integer                              
*                   description: Foreign Key for User schema       
*/

/**
* @swagger 
* components:
*   schemas:
*       DonationDTO:
*           type: object
*           required: 
*               - donationId          
*               - date          
*               - amount          
*               - userEmail          
*           properties: 
*               donationId:           
*                   type: integer           
*                   description: Primary Key. Autogenerated Id        
*               date:           
*                   type: string
*                   format: date-time                   
*               amount:                     
*                   type: number                              
*               userEmail:           
*                   type: string                              
*                   description: email from User schema          
*/



/* Get All */
/* GET DONATIONS API */
/**
* @swagger 
* /api/donations/:
*   get:
*       summary: Get donations list
*       tags: [Donation]
*       parameters:
*         - in: query
*           name: filter
*           schema:
*               type: string
*           required: true 
*           description: filter by user email 
*         - in: query
*           name: pageNumber
*           schema:
*               type: integer
*           required: true 
*         - in: query
*           name: pageSize
*           schema:
*               type: integer
*           required: true 
*         - in: query
*           name: sorterBy
*           schema:
*               type: string
*           required: true 
*         - in: query
*           name: sorterDirection
*           schema:
*               type: string
*           required: true 
*           description: asc or desc
*       responses:
*           200:
*               description: donations list
*               content:
*                   application/json:    
*                       schema:    
*                           type: array    
*                           items:  
*                               $ref: '#/components/schemas/DonationDTO'          
*           401:
*               description: Unauthorized
*           500:
*               description: Internal Error
*/
router.get('/', authenticate, isAdmin, donationController.getAll);

/* Add */
/**
* @swagger 
* /api/donations/:
*   post:
*       summary: Create a new Donation
*       tags: [Donation]
*       requestBody:
*           required: true
*           content:
*               application/json:    
*                   schema:    
*                       type: object    
*                       required: 
*                           - amount              
*                       properties:        
*                           amount:           
*                               type: number    
* 
*       responses:
*           201:
*               description: Created
*           401:
*               description: Unauthorized
*           500:
*               description: Internal Error
*/
router.post('/', authenticate, donationController.add)

/* Get by id */
/**
* @swagger 
* /api/donations/{id}:
*   get:
*       summary: Get donation
*       tags: [Donation]
*       parameters:
*         - in: path
*           name: id
*           schema:
*               type: integer
*           required: true 
*           description: donationId 
*       responses:
*           200:
*               description: donation
*               content:
*                   application/json:    
*                       schema:    
*                           $ref: '#/components/schemas/Donation'          
*           401:
*               description: Unauthorized
*           500:
*               description: Internal Error
*/
router.get('/:id', authenticate, isAdmin, donationController.get)

/* Update by id */
/**
* @swagger 
* /api/donations/{id}:
*   put:
*       summary: Update donation
*       tags: [Donation]
*       parameters:
*         - in: path
*           name: id
*           schema:
*               type: integer
*           required: true 
*           description: donationId
*       requestBody:
*           required: true
*           content:
*               application/json:    
*                   schema:    
*                       $ref: '#/components/schemas/Donation'
*       responses:
*           200:
*               description: donation
*               content:
*                   application/json:    
*                       schema:    
*                           $ref: '#/components/schemas/Donation'         
*           401:
*               description: Unauthorized
*           500:
*               description: Internal Error
*/
router.put('/:id', authenticate, isAdmin, donationController.update)

/* Delete by id */
/**
* @swagger 
* /api/donations/{id}:
*   delete:
*       summary: Delete donation
*       tags: [Donation]
*       parameters:
*         - in: path
*           name: id
*           schema:
*               type: integer
*           required: true 
*           description: donationId
*       responses:
*           200:
*               description: Deleted        
*           401:
*               description: Unauthorized
*           500:
*               description: Internal Error
*/
router.delete('/:id', authenticate,  isAdmin, donationController.delete)


module.exports = router;